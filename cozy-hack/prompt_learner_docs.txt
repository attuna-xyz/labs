Anthropic doemo

from prompt_learner.tasks.classification import ClassificationTask
from prompt_learner.examples.example import Example
from prompt_learner.prompts.prompt import Prompt
from prompt_learner.prompts.cot import CoT
from prompt_learner.templates.xml import XmlTemplate
from prompt_learner.adapters.anthropic import Anthropic
from prompt_learner.selectors.random_sampler import RandomSampler
from prompt_learner.selectors.diverse_sampler import DiverseSampler
from prompt_learner.evals.metrics.accuracy import Accuracy

task_description = "You have to classify customer texts as Urgent or Not Urgent"
allowed_labels = ["Urgent", "Not Urgent"]
classification_task = ClassificationTask(description=task_description, allowed_labels=allowed_labels)

template = XmlTemplate(task=classification_task)

classification_task.add_example(Example(text="Could you provide me with more information about your refund policy?", label="Not Urgent"))
classification_task.add_example(Example(text="My service is down and I am losing sales because of this!", label="Urgent"))
classification_task.add_example(Example(text="I am facing a deadline in 1 hour and cannot access my account", label="Urgent"))
classification_task.add_example(Example(text="Could you guide me to the recent changes in the pricing structure?", label="Not Urgent"))

sampler = RandomSampler(num_samples=2, task=classification_task)
sampler.select_examples()

claude_prompt = CoT(template=template)
claude_prompt.assemble_prompt()


with open("data/support_texts_test.csv") as f:
    idx=0
    for line in f:
        print(idx,line)
        idx+=1
        text, label = line.split(",")
        classification_task.add_example(Example(text=text.strip(), label=label.strip()), test=True)





acc, num_total_samplers = Accuracy(classification_task).compute(claude_prompt, Anthropic(),test=True)
print("got a test accuracy of ", acc, " with ", num_total_samplers, " eval samples")



classification_task.add_example(Example(text="I need to update my payment method before my subscription renews tonight.", label="Urgent"))
classification_task.add_example(Example(text="Could you please update me on the status of when you are releasing the AI enabled features?", label="Not Urgent"))

sampler = DiverseSampler(num_samples=3, task=classification_task)
sampler.select_examples()

claude_prompt = CoT(template=template)
claude_prompt.assemble_prompt()

print(claude_prompt.prompt)

acc, num_total_samplers = Accuracy(classification_task).compute(claude_prompt, Anthropic(),test=True)
print("got a test accuracy of ", acc, " with ", num_total_samplers, " eval samples")




claude_prompt.add_inference("You guys are the best! I love your service!")
answer = classification_task.predict(Anthropic(), claude_prompt.prompt)
print(answer)


Classification Demo

from prompt_learner.tasks.classification import ClassificationTask
from prompt_learner.examples.example import Example
from prompt_learner.prompts.prompt import Prompt
from prompt_learner.prompts.cot import CoT
from prompt_learner.templates.markdown import MarkdownTemplate
from prompt_learner.adapters.openai import OpenAI
from prompt_learner.adapters.llama  import Llama
from prompt_learner.selectors.random_sampler import RandomSampler
from prompt_learner.selectors.diverse_sampler import DiverseSampler
from prompt_learner.evals.metrics.accuracy import Accuracy

task_description = "You have to classify customer texts as Urgent or Not Urgent"
allowed_labels = ["Urgent", "Not Urgent"]
classification_task = ClassificationTask(description=task_description, allowed_labels=allowed_labels)

template = MarkdownTemplate(task=classification_task)

classification_task.add_example(Example(text="Could you provide me with more information about your refund policy?", label="Not Urgent"))
classification_task.add_example(Example(text="My service is down and I am losing sales because of this!", label="Urgent"))
classification_task.add_example(Example(text="I am facing a deadline in 1 hour and cannot access my account", label="Urgent"))
classification_task.add_example(Example(text="Could you guide me to the recent changes in the pricing structure?", label="Not Urgent"))

sampler = RandomSampler(num_samples=2, task=classification_task)
sampler.select_examples()

gpt_prompt = CoT(template=template)
gpt_prompt.assemble_prompt()
print(gpt_prompt.prompt)


with open("data/support_texts_test.csv") as f:
    idx=0
    for line in f:
        print(idx,line)
        idx+=1
        text, label = line.split(",")
        classification_task.add_example(Example(text=text.strip(), label=label.strip()), test=True)





acc, results = Accuracy(classification_task).compute(gpt_prompt, Llama(),test=True)
print(results)
print("got a test accuracy of ", acc, " with ", len(results), " eval samples")



classification_task.add_example(Example(text="I need to update my payment method before my subscription renews tonight.", label="Urgent"))
classification_task.add_example(Example(text="Could you please update me on the status of when you are releasing the AI enabled features?", label="Not Urgent"))

sampler = DiverseSampler(num_samples=3, task=classification_task)
sampler.select_examples()

gpt_prompt = CoT(template=template, selector=sampler)
gpt_prompt.assemble_prompt()

print(gpt_prompt.prompt)

acc,results = Accuracy(classification_task).compute(gpt_prompt, Llama(),test=True)
print("got a test accuracy of ", acc, " with ", len(results), " eval samples")




gpt_prompt.add_inference("You guys are the best! I love your service!")
answer = classification_task.predict(OpenAI(), gpt_prompt.prompt)
print(answer)

Grid Search Demo

from prompt_learner.optimizers.grid_search import GridSearch
from prompt_learner.tasks.classification import ClassificationTask
from prompt_learner.examples.example import Example
from prompt_learner.templates.markdown import MarkdownTemplate
from prompt_learner.templates.xml import XmlTemplate
from prompt_learner.adapters.ollama_local import OllamaLocal
from prompt_learner.adapters.openai import OpenAI
from prompt_learner.adapters.anthropic import Anthropic
from prompt_learner.selectors.random_sampler import RandomSampler

from prompt_learner.selectors.diverse_sampler import DiverseSampler
from prompt_learner.prompts.cot import CoT

task_description = "You have to classify customer texts as Urgent or Not Urgent"
allowed_labels = ["Urgent", "Not Urgent"]
classification_task = ClassificationTask(description=task_description, allowed_labels=allowed_labels)

template = MarkdownTemplate(task=classification_task)

with open("data/support_texts_test.csv") as f:
    idx=0
    for line in f:
        idx+=1
        text, label = line.split(",")
        classification_task.add_example(Example(text=text.strip(), label=label.strip()))

sampler = RandomSampler(num_samples=2, task=classification_task)
sampler.select_examples()

claude_prompt = CoT(template=template)
claude_prompt.assemble_prompt()

# initialize a grid search on current prompt
grid_search = GridSearch(prompt=claude_prompt)

# no sampler
#param_grid = {'template': [MarkdownTemplate, XmlTemplate], 'adapter': [Anthropic(model_name="claude-3-haiku-20240307"), OpenAI(model_name='gpt-4o')]}

# sampler and local model
#param_grid = {'sampler': [RandomSampler(num_samples=5,task=classification_task)], 'template': [MarkdownTemplate, XmlTemplate], 'adapter': [OllamaLocal()]}

#sampler, and models and templates
param_grid = {'sampler': [RandomSampler(num_samples=5,task=classification_task), DiverseSampler(num_samples=2,task=classification_task)], 'template': [MarkdownTemplate, XmlTemplate], 'adapter': [Anthropic(model_name="claude-3-haiku-20240307"), OpenAI(model_name='gpt-4o')]}
best_params, all_results = grid_search.search(param_grid)

print(best_params)
print(all_results)

Optimize Classifier Demo

from prompt_learner.adapters.openai import OpenAI

from prompt_learner.templates.markdown import MarkdownTemplate

from prompt_learner.tasks.classification import ClassificationTask

from prompt_learner.examples.example import Example

from prompt_learner.selectors.random_sampler import RandomSampler
from prompt_learner.selectors.stratified_sampler import StratifiedSampler
from prompt_learner.selectors.diverse_sampler import DiverseSampler
from prompt_learner.prompts.cot import CoT
from prompt_learner.prompts.prompt import Prompt #can call it base prompt

classification_description = "You have to classify customer texts as Urgent or Not Urgent"
classification_labels = ["Urgent", "Not Urgent"]
classification_task = ClassificationTask(description=classification_description, allowed_labels=classification_labels)
with open("data/support_texts.csv") as f:
    idx=0
    for line in f:
        print(idx,line)
        idx+=1
        text, label = line.split(",")
        classification_task.add_example(Example(text=text.strip(), label=label.strip()))
with open("data/support_texts_test.csv") as f:
    idx=0
    for line in f:
        print(idx,line)
        idx+=1
        text, label = line.split(",")
        classification_task.add_example(Example(text=text.strip(), label=label.strip()), test=True)

task = classification_task
markdown_template = MarkdownTemplate(task=classification_task)
sampler = StratifiedSampler(num_samples=2, task=classification_task)
sampler.select_examples()
gpt_prompt = CoT(template=markdown_template)
gpt_prompt.assemble_prompt()
print(gpt_prompt.prompt)
print("Evals,")
acc, num_total_samplers = Accuracy(classification_task).compute(gpt_prompt, OpenAI())
print("got a val accuracy of ", acc, " with ", num_total_samplers, " eval samples")
acc, num_total_samplers = Accuracy(classification_task).compute(gpt_prompt, OpenAI(),test=True)
print("got a test accuracy of ", acc, " with ", num_total_samplers, " eval samples")
sampler = DiverseSampler(num_samples=4, task=classification_task)
sampler.select_examples()
gpt_prompt = CoT(template=markdown_template)
gpt_prompt.assemble_prompt()
print(gpt_prompt.prompt)
print("Evals,")
acc, num_total_samplers = Accuracy(classification_task).compute(gpt_prompt, OpenAI())
print("got a val accuracy of ", acc, " with ", num_total_samplers, " eval samples")
acc, num_total_samplers = Accuracy(classification_task).compute(gpt_prompt, OpenAI(),test=True)
print("got a test accuracy of ", acc, " with ", num_total_samplers, " eval samples")
# gpt_prompt.add_inference("My package is missing")
# print(gpt_prompt.prompt)
# answer = classification_task.predict(OpenAI(), gpt_prompt.prompt)
# print("ANSWER:", answer)

#--

# claude_template = XmlTemplate(classification_task,sampler)

# print(claude_template.prompt)
# final_prompt = markdown_template.add_prediction_sample("My package is missing")
# answer = classification_task.predict(OpenAI(), final_prompt)
# print("ANSWER:", answer)
# print("Valid output>", classification_task.validate_prediction("My package is missing", answer))
# final_prompt = claude_template.add_prediction_sample("My package is missing")
# answer = classification_task.predict(Anthropic(), final_prompt)
# print("ANSWER:", answer)
# print("Valid output>", classification_task.validate_prediction("My package is missing", answer))